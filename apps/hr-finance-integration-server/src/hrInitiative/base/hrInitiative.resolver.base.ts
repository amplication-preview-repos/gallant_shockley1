/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HrInitiative } from "./HrInitiative";
import { HrInitiativeCountArgs } from "./HrInitiativeCountArgs";
import { HrInitiativeFindManyArgs } from "./HrInitiativeFindManyArgs";
import { HrInitiativeFindUniqueArgs } from "./HrInitiativeFindUniqueArgs";
import { CreateHrInitiativeArgs } from "./CreateHrInitiativeArgs";
import { UpdateHrInitiativeArgs } from "./UpdateHrInitiativeArgs";
import { DeleteHrInitiativeArgs } from "./DeleteHrInitiativeArgs";
import { Budget } from "../../budget/base/Budget";
import { HrInitiativeService } from "../hrInitiative.service";
@graphql.Resolver(() => HrInitiative)
export class HrInitiativeResolverBase {
  constructor(protected readonly service: HrInitiativeService) {}

  async _hrInitiativesMeta(
    @graphql.Args() args: HrInitiativeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HrInitiative])
  async hrInitiatives(
    @graphql.Args() args: HrInitiativeFindManyArgs
  ): Promise<HrInitiative[]> {
    return this.service.hrInitiatives(args);
  }

  @graphql.Query(() => HrInitiative, { nullable: true })
  async hrInitiative(
    @graphql.Args() args: HrInitiativeFindUniqueArgs
  ): Promise<HrInitiative | null> {
    const result = await this.service.hrInitiative(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HrInitiative)
  async createHrInitiative(
    @graphql.Args() args: CreateHrInitiativeArgs
  ): Promise<HrInitiative> {
    return await this.service.createHrInitiative({
      ...args,
      data: {
        ...args.data,

        budget: args.data.budget
          ? {
              connect: args.data.budget,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => HrInitiative)
  async updateHrInitiative(
    @graphql.Args() args: UpdateHrInitiativeArgs
  ): Promise<HrInitiative | null> {
    try {
      return await this.service.updateHrInitiative({
        ...args,
        data: {
          ...args.data,

          budget: args.data.budget
            ? {
                connect: args.data.budget,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HrInitiative)
  async deleteHrInitiative(
    @graphql.Args() args: DeleteHrInitiativeArgs
  ): Promise<HrInitiative | null> {
    try {
      return await this.service.deleteHrInitiative(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Budget, {
    nullable: true,
    name: "budget",
  })
  async getBudget(
    @graphql.Parent() parent: HrInitiative
  ): Promise<Budget | null> {
    const result = await this.service.getBudget(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

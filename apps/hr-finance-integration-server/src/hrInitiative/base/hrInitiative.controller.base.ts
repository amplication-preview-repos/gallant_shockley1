/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HrInitiativeService } from "../hrInitiative.service";
import { HrInitiativeCreateInput } from "./HrInitiativeCreateInput";
import { HrInitiative } from "./HrInitiative";
import { HrInitiativeFindManyArgs } from "./HrInitiativeFindManyArgs";
import { HrInitiativeWhereUniqueInput } from "./HrInitiativeWhereUniqueInput";
import { HrInitiativeUpdateInput } from "./HrInitiativeUpdateInput";

export class HrInitiativeControllerBase {
  constructor(protected readonly service: HrInitiativeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HrInitiative })
  async createHrInitiative(
    @common.Body() data: HrInitiativeCreateInput
  ): Promise<HrInitiative> {
    return await this.service.createHrInitiative({
      data: {
        ...data,

        budget: data.budget
          ? {
              connect: data.budget,
            }
          : undefined,
      },
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HrInitiative] })
  @ApiNestedQuery(HrInitiativeFindManyArgs)
  async hrInitiatives(@common.Req() request: Request): Promise<HrInitiative[]> {
    const args = plainToClass(HrInitiativeFindManyArgs, request.query);
    return this.service.hrInitiatives({
      ...args,
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HrInitiative })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hrInitiative(
    @common.Param() params: HrInitiativeWhereUniqueInput
  ): Promise<HrInitiative | null> {
    const result = await this.service.hrInitiative({
      where: params,
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HrInitiative })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHrInitiative(
    @common.Param() params: HrInitiativeWhereUniqueInput,
    @common.Body() data: HrInitiativeUpdateInput
  ): Promise<HrInitiative | null> {
    try {
      return await this.service.updateHrInitiative({
        where: params,
        data: {
          ...data,

          budget: data.budget
            ? {
                connect: data.budget,
              }
            : undefined,
        },
        select: {
          budget: {
            select: {
              id: true,
            },
          },

          cost: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HrInitiative })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHrInitiative(
    @common.Param() params: HrInitiativeWhereUniqueInput
  ): Promise<HrInitiative | null> {
    try {
      return await this.service.deleteHrInitiative({
        where: params,
        select: {
          budget: {
            select: {
              id: true,
            },
          },

          cost: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

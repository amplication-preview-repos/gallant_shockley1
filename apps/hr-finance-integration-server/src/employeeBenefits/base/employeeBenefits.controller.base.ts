/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeBenefitsService } from "../employeeBenefits.service";
import { EmployeeBenefitsCreateInput } from "./EmployeeBenefitsCreateInput";
import { EmployeeBenefits } from "./EmployeeBenefits";
import { EmployeeBenefitsFindManyArgs } from "./EmployeeBenefitsFindManyArgs";
import { EmployeeBenefitsWhereUniqueInput } from "./EmployeeBenefitsWhereUniqueInput";
import { EmployeeBenefitsUpdateInput } from "./EmployeeBenefitsUpdateInput";

export class EmployeeBenefitsControllerBase {
  constructor(protected readonly service: EmployeeBenefitsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeBenefits })
  async createEmployeeBenefits(
    @common.Body() data: EmployeeBenefitsCreateInput
  ): Promise<EmployeeBenefits> {
    return await this.service.createEmployeeBenefits({
      data: data,
      select: {
        benefitType: true,
        cost: true,
        createdAt: true,
        description: true,
        employeeName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeBenefits] })
  @ApiNestedQuery(EmployeeBenefitsFindManyArgs)
  async employeeBenefitsItems(
    @common.Req() request: Request
  ): Promise<EmployeeBenefits[]> {
    const args = plainToClass(EmployeeBenefitsFindManyArgs, request.query);
    return this.service.employeeBenefitsItems({
      ...args,
      select: {
        benefitType: true,
        cost: true,
        createdAt: true,
        description: true,
        employeeName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeBenefits })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeBenefits(
    @common.Param() params: EmployeeBenefitsWhereUniqueInput
  ): Promise<EmployeeBenefits | null> {
    const result = await this.service.employeeBenefits({
      where: params,
      select: {
        benefitType: true,
        cost: true,
        createdAt: true,
        description: true,
        employeeName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeBenefits })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeBenefits(
    @common.Param() params: EmployeeBenefitsWhereUniqueInput,
    @common.Body() data: EmployeeBenefitsUpdateInput
  ): Promise<EmployeeBenefits | null> {
    try {
      return await this.service.updateEmployeeBenefits({
        where: params,
        data: data,
        select: {
          benefitType: true,
          cost: true,
          createdAt: true,
          description: true,
          employeeName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeBenefits })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeBenefits(
    @common.Param() params: EmployeeBenefitsWhereUniqueInput
  ): Promise<EmployeeBenefits | null> {
    try {
      return await this.service.deleteEmployeeBenefits({
        where: params,
        select: {
          benefitType: true,
          cost: true,
          createdAt: true,
          description: true,
          employeeName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

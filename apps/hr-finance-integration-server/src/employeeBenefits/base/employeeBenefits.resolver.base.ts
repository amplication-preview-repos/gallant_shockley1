/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeBenefits } from "./EmployeeBenefits";
import { EmployeeBenefitsCountArgs } from "./EmployeeBenefitsCountArgs";
import { EmployeeBenefitsFindManyArgs } from "./EmployeeBenefitsFindManyArgs";
import { EmployeeBenefitsFindUniqueArgs } from "./EmployeeBenefitsFindUniqueArgs";
import { CreateEmployeeBenefitsArgs } from "./CreateEmployeeBenefitsArgs";
import { UpdateEmployeeBenefitsArgs } from "./UpdateEmployeeBenefitsArgs";
import { DeleteEmployeeBenefitsArgs } from "./DeleteEmployeeBenefitsArgs";
import { EmployeeBenefitsService } from "../employeeBenefits.service";
@graphql.Resolver(() => EmployeeBenefits)
export class EmployeeBenefitsResolverBase {
  constructor(protected readonly service: EmployeeBenefitsService) {}

  async _employeeBenefitsItemsMeta(
    @graphql.Args() args: EmployeeBenefitsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeBenefits])
  async employeeBenefitsItems(
    @graphql.Args() args: EmployeeBenefitsFindManyArgs
  ): Promise<EmployeeBenefits[]> {
    return this.service.employeeBenefitsItems(args);
  }

  @graphql.Query(() => EmployeeBenefits, { nullable: true })
  async employeeBenefits(
    @graphql.Args() args: EmployeeBenefitsFindUniqueArgs
  ): Promise<EmployeeBenefits | null> {
    const result = await this.service.employeeBenefits(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeBenefits)
  async createEmployeeBenefits(
    @graphql.Args() args: CreateEmployeeBenefitsArgs
  ): Promise<EmployeeBenefits> {
    return await this.service.createEmployeeBenefits({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmployeeBenefits)
  async updateEmployeeBenefits(
    @graphql.Args() args: UpdateEmployeeBenefitsArgs
  ): Promise<EmployeeBenefits | null> {
    try {
      return await this.service.updateEmployeeBenefits({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeBenefits)
  async deleteEmployeeBenefits(
    @graphql.Args() args: DeleteEmployeeBenefitsArgs
  ): Promise<EmployeeBenefits | null> {
    try {
      return await this.service.deleteEmployeeBenefits(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
